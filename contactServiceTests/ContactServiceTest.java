package contactServiceTests;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

import contactService.ContactService;


class ContactServiceTest{
	
	@Test
	//adding contacts
	//test adds two contacts and verifies that the contact list has two elements
	void testAddContact() {
		ContactService service = new ContactService();
		service.newContact("Mike", "Jones", "2813308004", "1121 Willy Way");
		service.newContact("Chris", "Jones", "5558675309", "1123 Willy Way");
		assertNotNull(service.contactList.get(0));
		assertNotNull(service.contactList.get(1));
		assertTrue(service.listSize() == 2);
	}
	
	@Test
	//tests that generated contact ID's are unique
	//IDs are generated by the contact service but are a field for contact objects
	void testUniqueIDs() {
		//generate 2 new contacts with the contact service and assert that the generated IDs are not equal
		ContactService service = new ContactService();
		service.newContact("Mike", "Jones", "2813308004", "1121 Willy Way");
		service.newContact("Chris", "Jones", "5558675309", "1123 Willy Way");
		String ID1 = service.contactList.get(0).getContactID();
		String ID2 = service.contactList.get(1).getContactID();
		assertFalse(ID1 == ID2);
	}
	
	@Test
	//removing a contact
	//test adds two contacts, then removes one and verifies that the contact list has 1 element
	void testRemoveContact() {
		ContactService service = new ContactService();
		service.newContact("Mike", "Jones", "2813308004", "1121 Willy Way");
		service.newContact("Chris", "Jones", "5558675309", "1123 Willy Way");
		assertTrue(service.contactList.size() == 2);
		
		String ID = service.contactList.get(1).getContactID();
		service.delContact(ID);
		assertTrue(service.contactList.size() == 1);
	}
	
	@Test
	//update value: first name
	//test creates as contact then updates the first name and tests for verification
	void testUpdateFirstName() {
		ContactService service = new ContactService();
		service.newContact("Mike", "Jones", "2813308004", "1121 Willy Way");
		String ID = service.contactList.get(0).getContactID();
		service.updateFirstName(ID, "Michael");
		assertNotNull(service.contactList.get(0));
		assertTrue(service.contactList.get(0).getFirstName().equals("Michael"));
	}
	
	@Test
	//update value: last name
	//test creates as contact then updates the last name and tests for verification
	void testUpdateLastName() {
		ContactService service = new ContactService();
		service.newContact("Mike", "Jones", "2813308004", "1121 Willy Way");
		String ID = service.contactList.get(0).getContactID();
		service.updateLastName(ID, "Jackson");
		assertNotNull(service.contactList.get(0));
		assertTrue(service.contactList.get(0).getLastName().equals("Jackson"));
	}
	
	
	@Test
	//update value: phone number
	//test creates as contact then updates the phone number and tests for verification
	void testUpdatePhoneNumber() {
		ContactService service = new ContactService();
		service.newContact("Mike", "Jones", "2813308004", "1121 Willy Way");
		String ID = service.contactList.get(0).getContactID();
		service.updatePhone(ID, "5558675309");
		assertNotNull(service.contactList.get(0));
		assertTrue(service.contactList.get(0).getPhoneNum().equals("5558675309"));
	}
	
	@Test
	//update value: address
	//test creates as contact then updates the address and tests for verification
	void testUpdateAddress() {
		ContactService service = new ContactService();
		service.newContact("Mike", "Jones", "2813308004", "1121 Willy Way");
		String ID = service.contactList.get(0).getContactID();
		service.updateAddress(ID, "2222 Willy Way");
		assertNotNull(service.contactList.get(0));
		assertTrue(service.contactList.get(0).getAddress().equals("2222 Willy Way"));
	}
	
	
	
}